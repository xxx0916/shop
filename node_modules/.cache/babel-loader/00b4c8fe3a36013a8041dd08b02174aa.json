{"ast":null,"code":"import { reqGetSearchInfo } from '@/api'; // search模块的小仓库\n// state:仓库存储数据的地方\n\nconst state = {\n  // 仓库初始化\n  searchList: {}\n}; // mutations:修改state的唯一手段\n\nconst mutations = {\n  GETSEARCHLIST(state, searchList) {\n    state.searchList = searchList;\n  }\n\n}; // action:处理action,可以书写自己的业务逻辑，也可以吃了异步\n\nconst actions = {\n  // 获取search模块数据\n  async getSearchList({\n    commit\n  }, params = {}) {\n    // 当前增reqGetSearchInfo这个函数在调用服务器数据的时候，至少传递一个参数（空对象）\n    // params形参：是当前用户派发action的时候，在二个参数传递过来的，至少是一个空对象\n    let result = await reqGetSearchInfo(params);\n\n    if (result.code == 200) {\n      commit('GETSEARCHLIST', result.data);\n    }\n  }\n\n}; // getters:理解为计算属性，用于简化仓库数据，让组件获取仓库的数据更加方便\n\nconst getters = {\n  // 当前形参state,当前仓库中的state,并非大仓库中的state\n  goodsList(state) {\n    // state.searchList.goodsList如果服务器数据回来了，没问题是一个数组\n    // 假如没有网或者网络不给力state.searchList.goodsList应该返回的是undefined\n    // 计算新的属性的属性值至少给人家来一个空数组\n    return state.searchList.goodsList || [];\n  },\n\n  trademarkList(state) {\n    return state.searchList.trademarkList || [];\n  },\n\n  attrsList(state) {\n    return state.searchList.attrsList || [];\n  }\n\n};\nexport default {\n  state,\n  mutations,\n  actions,\n  getters\n};","map":null,"metadata":{},"sourceType":"module"}