{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { reqCartList, reqDeleteCartById, reqUpdateCheckedByid } from \"@/api\";\nconst state = {\n  cartList: []\n};\nconst mutations = {\n  GETCARTLIST(state, cartList) {\n    state.cartList = cartList;\n  }\n\n};\nconst actions = {\n  // 获取购物车的列表数据\n  async getCartList({\n    commit\n  }) {\n    let result = await reqCartList();\n\n    if (result.code == 200) {\n      commit(\"GETCARTLIST\", result.data);\n    }\n  },\n\n  // 删除购物车某一个产品(服务器无需返回数据)\n  async deleteCartListBySkuId({\n    commit\n  }, skuId) {\n    let result = await reqDeleteCartById(skuId);\n\n    if (result.code == 200) {\n      return 'ok';\n    } else {\n      return Promise.reject(new Error('faile'));\n    }\n  },\n\n  // 修改购物车某一个产品的选中状态\n  async UpdateCheckedById({\n    commit\n  }, {\n    skuId,\n    isChecked\n  }) {\n    let result = await reqUpdateCheckedByid(skuId, isChecked);\n\n    if (result.code == 200) {\n      return \"ok\";\n    } else {\n      return Promise.reject(new Error('faile'));\n    }\n  },\n\n  // 删除全部勾选的产品\n  deleteAllCheckedCart({\n    dispatch,\n    getters\n  }) {\n    // context:小仓库，commit[提交mutations修改state],getter[计算属性] dispatch[派发action] state[当前仓库数据]\n    // console.log(getters.cartList.cartInfoList);\n    // 获取购物车中的全部商品（是一个数组）\n    let PromiseAll = [];\n    getters.cartList.cartInfoList.forEach(item => {\n      let promise = item.isChecked == 1 ? dispatch('deleteCartListBySkuId', item.skuId) : ''; // 将每一次返回的Promise添加到数组当中\n\n      PromiseAll.push(promise);\n    }); // 只要全部全部p1|p2....都成功，返回即为成功\n    // 如果有一个失败，返回即为失败结果\n\n    return Promise.all(PromiseAll);\n  }\n\n};\nconst getters = {\n  cartList(state) {\n    return state.cartList[0] || {};\n  }\n\n};\nexport default {\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["reqCartList","reqDeleteCartById","reqUpdateCheckedByid","state","cartList","mutations","GETCARTLIST","actions","getCartList","commit","result","code","data","deleteCartListBySkuId","skuId","Promise","reject","Error","UpdateCheckedById","isChecked","deleteAllCheckedCart","dispatch","getters","PromiseAll","cartInfoList","forEach","item","promise","push","all"],"sources":["D:/aUsers26043Desktop/vue-project2/shop/src/store/shopcart/index.js"],"sourcesContent":["import { reqCartList,reqDeleteCartById,reqUpdateCheckedByid } from \"@/api\";\r\nconst state ={\r\n    cartList:[]\r\n}\r\nconst mutations={\r\n    GETCARTLIST(state,cartList){\r\n        state.cartList=cartList\r\n    }\r\n}\r\nconst actions={\r\n    // 获取购物车的列表数据\r\n    async getCartList({commit}){\r\n        let result =  await reqCartList();\r\n        if(result.code==200){\r\n            commit(\"GETCARTLIST\",result.data)\r\n        }\r\n    },\r\n    // 删除购物车某一个产品(服务器无需返回数据)\r\n    async deleteCartListBySkuId({commit},skuId){\r\n        let result = await reqDeleteCartById(skuId);\r\n        if(result.code==200){\r\n            return 'ok';\r\n        }else{\r\n            return Promise.reject(new Error('faile'));\r\n        }\r\n    },\r\n    // 修改购物车某一个产品的选中状态\r\n    async UpdateCheckedById({commit},{skuId,isChecked}){\r\n        let result = await reqUpdateCheckedByid(skuId,isChecked)\r\n        if(result.code==200){\r\n            return \"ok\";\r\n        }else{\r\n            return Promise.reject(new Error('faile'));\r\n        }\r\n    },\r\n    // 删除全部勾选的产品\r\n    deleteAllCheckedCart({dispatch,getters}){\r\n        // context:小仓库，commit[提交mutations修改state],getter[计算属性] dispatch[派发action] state[当前仓库数据]\r\n        // console.log(getters.cartList.cartInfoList);\r\n        // 获取购物车中的全部商品（是一个数组）\r\n        let PromiseAll = [];\r\n        getters.cartList.cartInfoList.forEach(item=>{\r\n            let promise = item.isChecked==1?dispatch('deleteCartListBySkuId',item.skuId):'';\r\n            // 将每一次返回的Promise添加到数组当中\r\n            PromiseAll.push(promise);\r\n        });\r\n        // 只要全部全部p1|p2....都成功，返回即为成功\r\n        // 如果有一个失败，返回即为失败结果\r\n        return Promise.all(PromiseAll)\r\n    }\r\n}\r\nconst getters={\r\n    cartList(state){\r\n        return state.cartList[0]||{}\r\n    }\r\n}\r\nexport default{\r\n    state,\r\n    mutations,\r\n    actions,\r\n    getters\r\n}"],"mappings":";AAAA,SAASA,WAAT,EAAqBC,iBAArB,EAAuCC,oBAAvC,QAAmE,OAAnE;AACA,MAAMC,KAAK,GAAE;EACTC,QAAQ,EAAC;AADA,CAAb;AAGA,MAAMC,SAAS,GAAC;EACZC,WAAW,CAACH,KAAD,EAAOC,QAAP,EAAgB;IACvBD,KAAK,CAACC,QAAN,GAAeA,QAAf;EACH;;AAHW,CAAhB;AAKA,MAAMG,OAAO,GAAC;EACV;EACA,MAAMC,WAAN,CAAkB;IAACC;EAAD,CAAlB,EAA2B;IACvB,IAAIC,MAAM,GAAI,MAAMV,WAAW,EAA/B;;IACA,IAAGU,MAAM,CAACC,IAAP,IAAa,GAAhB,EAAoB;MAChBF,MAAM,CAAC,aAAD,EAAeC,MAAM,CAACE,IAAtB,CAAN;IACH;EACJ,CAPS;;EAQV;EACA,MAAMC,qBAAN,CAA4B;IAACJ;EAAD,CAA5B,EAAqCK,KAArC,EAA2C;IACvC,IAAIJ,MAAM,GAAG,MAAMT,iBAAiB,CAACa,KAAD,CAApC;;IACA,IAAGJ,MAAM,CAACC,IAAP,IAAa,GAAhB,EAAoB;MAChB,OAAO,IAAP;IACH,CAFD,MAEK;MACD,OAAOI,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,OAAV,CAAf,CAAP;IACH;EACJ,CAhBS;;EAiBV;EACA,MAAMC,iBAAN,CAAwB;IAACT;EAAD,CAAxB,EAAiC;IAACK,KAAD;IAAOK;EAAP,CAAjC,EAAmD;IAC/C,IAAIT,MAAM,GAAG,MAAMR,oBAAoB,CAACY,KAAD,EAAOK,SAAP,CAAvC;;IACA,IAAGT,MAAM,CAACC,IAAP,IAAa,GAAhB,EAAoB;MAChB,OAAO,IAAP;IACH,CAFD,MAEK;MACD,OAAOI,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,OAAV,CAAf,CAAP;IACH;EACJ,CAzBS;;EA0BV;EACAG,oBAAoB,CAAC;IAACC,QAAD;IAAUC;EAAV,CAAD,EAAoB;IACpC;IACA;IACA;IACA,IAAIC,UAAU,GAAG,EAAjB;IACAD,OAAO,CAAClB,QAAR,CAAiBoB,YAAjB,CAA8BC,OAA9B,CAAsCC,IAAI,IAAE;MACxC,IAAIC,OAAO,GAAGD,IAAI,CAACP,SAAL,IAAgB,CAAhB,GAAkBE,QAAQ,CAAC,uBAAD,EAAyBK,IAAI,CAACZ,KAA9B,CAA1B,GAA+D,EAA7E,CADwC,CAExC;;MACAS,UAAU,CAACK,IAAX,CAAgBD,OAAhB;IACH,CAJD,EALoC,CAUpC;IACA;;IACA,OAAOZ,OAAO,CAACc,GAAR,CAAYN,UAAZ,CAAP;EACH;;AAxCS,CAAd;AA0CA,MAAMD,OAAO,GAAC;EACVlB,QAAQ,CAACD,KAAD,EAAO;IACX,OAAOA,KAAK,CAACC,QAAN,CAAe,CAAf,KAAmB,EAA1B;EACH;;AAHS,CAAd;AAKA,eAAc;EACVD,KADU;EAEVE,SAFU;EAGVE,OAHU;EAIVe;AAJU,CAAd"},"metadata":{},"sourceType":"module"}