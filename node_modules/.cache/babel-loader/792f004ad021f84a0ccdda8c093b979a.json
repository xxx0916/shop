{"ast":null,"code":"// 引入Swiper\nimport Swiper from 'swiper';\nexport default {\n  name: 'Carousel',\n  props: ['list'],\n  watch: {\n    // 监听bannerList数据变化：因为这条数据方式了变化\n    bannerList: {\n      immediate: true,\n\n      //立即监听\n      handler(newValue, oldValue) {\n        // 通过watch监听bannerList属性的属性值的变化\n        // 如果执行handler方法，代表组件实例身上这个属性的属性已经有了【数组：四个元素】\n        // 当前这个函数执行：只能保证bannerList数据已经有了，但是你没办法保证v-for已经执行结束了\n        // v-for执行完毕，才有结构【现在在watch当中没办法保证的】\n        // netxTick:在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM\n        this.$nextTick(() => {\n          // 执行这个回调时候：保证服务器数据回来了，v-for执行完毕了【轮播图需要的结构也有了】\n          var mySwiper = new Swiper(this.$refs.mySwiper, {\n            loop: true,\n            // 循环模式选项\n            // 如果需要分页器\n            pagination: {\n              el: '.swiper-pagination',\n              //点击小球切换图片\n              clickable: true\n            },\n            // 如果需要前进后退按钮\n            navigation: {\n              nextEl: '.swiper-button-next',\n              prevEl: '.swiper-button-prev'\n            }\n          });\n        });\n      }\n\n    }\n  }\n};","map":{"version":3,"mappings":"AAiBA;AACA;AACA;EACAA,gBADA;EAEAC,eAFA;EAGAC;IACA;IACAC;MACAC,eADA;;MACA;MACAC;QACA;QACA;QACA;QACA;QACA;QACA;UACA;UACA;YACAC,UADA;YACA;YACA;YACAC;cACAC,wBADA;cAEA;cACAC;YAHA,CAHA;YASA;YACAC;cACAC,6BADA;cAEAC;YAFA;UAVA;QAeA,CAjBA;MAkBA;;IA1BA;EAFA;AAHA","names":["name","props","watch","bannerList","immediate","handler","loop","pagination","el","clickable","navigation","nextEl","prevEl"],"sourceRoot":"src/components/Carousel","sources":["index.vue"],"sourcesContent":["<template>\r\n    <div class=\"swiper-container\" ref=\"cur\">\r\n        <div class=\"swiper-wrapper\">\r\n            <div class=\"swiper-slide\" v-for=\"(carousel, index) in list\" :key=\"carousel.id\">\r\n                <img :src=\"carousel.imgUrl\">\r\n            </div>\r\n        </div>\r\n        <!-- 如果需要分页器 -->\r\n        <div class=\"swiper-pagination\"></div>\r\n\r\n        <!-- 如果需要导航按钮 -->\r\n        <div class=\"swiper-button-prev\"></div>\r\n        <div class=\"swiper-button-next\"></div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n// 引入Swiper\r\nimport Swiper from 'swiper'\r\nexport default {\r\n    name: 'Carousel',\r\n    props: ['list'],\r\n    watch: {\r\n        // 监听bannerList数据变化：因为这条数据方式了变化\r\n        bannerList: {\r\n            immediate: true,//立即监听\r\n            handler(newValue, oldValue) {\r\n                // 通过watch监听bannerList属性的属性值的变化\r\n                // 如果执行handler方法，代表组件实例身上这个属性的属性已经有了【数组：四个元素】\r\n                // 当前这个函数执行：只能保证bannerList数据已经有了，但是你没办法保证v-for已经执行结束了\r\n                // v-for执行完毕，才有结构【现在在watch当中没办法保证的】\r\n                // netxTick:在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM\r\n                this.$nextTick(() => {\r\n                    // 执行这个回调时候：保证服务器数据回来了，v-for执行完毕了【轮播图需要的结构也有了】\r\n                    var mySwiper = new Swiper(this.$refs.mySwiper, {\r\n                        loop: true, // 循环模式选项\r\n                        // 如果需要分页器\r\n                        pagination: {\r\n                            el: '.swiper-pagination',\r\n                            //点击小球切换图片\r\n                            clickable: true,\r\n                        },\r\n\r\n                        // 如果需要前进后退按钮\r\n                        navigation: {\r\n                            nextEl: '.swiper-button-next',\r\n                            prevEl: '.swiper-button-prev',\r\n                        },\r\n                    })\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n</style>"]},"metadata":{},"sourceType":"module"}