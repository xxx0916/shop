{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n// 对于axios进行二次封装\nimport axios from \"axios\"; // 在当前模块中引入store\n\nimport store from \"@/store\"; // 引入进度条\n\nimport nprogress from \"nprogress\"; // 引入进度条样式\n\nimport \"nprogress/nprogress.css\"; // start:进度条开始  done:进度条结束\n// 1:利用axios对象的方法create,去 创建一个axios实例\n// 2：request就是axios,只不过稍微配置一下\n\nconst requests = axios.create({\n  // 配置对象\n  //基础路径，发请求的时候，路径当中会出现api\n  baseURL: \"/api\",\n  // 代表请求超时的时间5S\n  tiemout: 5000\n}); // 请求拦截器：在发请求之前，请求拦截器可以检查到，可以在请求发出去之前做一下事情\n\nrequests.interceptors.request.use(config => {\n  // config：配置对象，对象里面有一个属性很重要，headers请求头\n  // 进度条开始动\n  if (store.state.detail.uuid_token) {\n    // 请求头添加一个字段（userTempId):和后台商量好的\n    config.headers.userTempId = store.state.detail.uuid_token;\n  } //    需要携带token带给服务器\n\n\n  if (store.state.user.token) {\n    config.headers.token = store.state.user.token;\n  }\n\n  nprogress.start();\n  return config;\n}); // 响应拦截器\n\nrequests.interceptors.response.use(res => {\n  // 成功的回调函数:服务器相应数据回来以后，响应拦截器可以检测到，可以做一下事情\n  // 进度条开始动\n  nprogress.done();\n  return res.data;\n}, error => {\n  // 响应失败的回调函数\n  return Promise.reject(new Error('fail'));\n}); // 对外暴露\n\nexport default requests;","map":{"version":3,"names":["axios","store","nprogress","requests","create","baseURL","tiemout","interceptors","request","use","config","state","detail","uuid_token","headers","userTempId","user","token","start","response","res","done","data","error","Promise","reject","Error"],"sources":["D:/aUsers26043Desktop/vue-project2/shop/src/api/request.js"],"sourcesContent":["// 对于axios进行二次封装\r\nimport axios from \"axios\";\r\n// 在当前模块中引入store\r\nimport store from \"@/store\";\r\n// 引入进度条\r\nimport nprogress from \"nprogress\";\r\n// 引入进度条样式\r\nimport \"nprogress/nprogress.css\"\r\n// start:进度条开始  done:进度条结束\r\n\r\n// 1:利用axios对象的方法create,去 创建一个axios实例\r\n// 2：request就是axios,只不过稍微配置一下\r\nconst requests  = axios.create({\r\n    // 配置对象\r\n    //基础路径，发请求的时候，路径当中会出现api\r\n    baseURL:\"/api\",\r\n    // 代表请求超时的时间5S\r\n    tiemout:5000\r\n});\r\n\r\n// 请求拦截器：在发请求之前，请求拦截器可以检查到，可以在请求发出去之前做一下事情\r\nrequests.interceptors.request.use((config)=>{\r\n    // config：配置对象，对象里面有一个属性很重要，headers请求头\r\n    // 进度条开始动\r\n   if(store.state.detail.uuid_token){\r\n    // 请求头添加一个字段（userTempId):和后台商量好的\r\n    config.headers.userTempId=store.state.detail.uuid_token\r\n   }\r\n    //    需要携带token带给服务器\r\n    if(store.state.user.token){\r\n        config.headers.token=store.state.user.token\r\n    }\r\n    nprogress.start();\r\n    return config;\r\n});\r\n\r\n// 响应拦截器\r\nrequests.interceptors.response.use((res)=>{\r\n    // 成功的回调函数:服务器相应数据回来以后，响应拦截器可以检测到，可以做一下事情\r\n    // 进度条开始动\r\n    nprogress.done();\r\n    return res.data\r\n},(error)=>{\r\n    // 响应失败的回调函数\r\n    return Promise.reject(new Error('fail'));\r\n})\r\n\r\n\r\n// 对外暴露\r\nexport default requests;"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,WAAtB,C,CACA;;AACA,OAAO,yBAAP,C,CACA;AAEA;AACA;;AACA,MAAMC,QAAQ,GAAIH,KAAK,CAACI,MAAN,CAAa;EAC3B;EACA;EACAC,OAAO,EAAC,MAHmB;EAI3B;EACAC,OAAO,EAAC;AALmB,CAAb,CAAlB,C,CAQA;;AACAH,QAAQ,CAACI,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAmCC,MAAD,IAAU;EACxC;EACA;EACD,IAAGT,KAAK,CAACU,KAAN,CAAYC,MAAZ,CAAmBC,UAAtB,EAAiC;IAChC;IACAH,MAAM,CAACI,OAAP,CAAeC,UAAf,GAA0Bd,KAAK,CAACU,KAAN,CAAYC,MAAZ,CAAmBC,UAA7C;EACA,CANwC,CAOxC;;;EACA,IAAGZ,KAAK,CAACU,KAAN,CAAYK,IAAZ,CAAiBC,KAApB,EAA0B;IACtBP,MAAM,CAACI,OAAP,CAAeG,KAAf,GAAqBhB,KAAK,CAACU,KAAN,CAAYK,IAAZ,CAAiBC,KAAtC;EACH;;EACDf,SAAS,CAACgB,KAAV;EACA,OAAOR,MAAP;AACH,CAbD,E,CAeA;;AACAP,QAAQ,CAACI,YAAT,CAAsBY,QAAtB,CAA+BV,GAA/B,CAAoCW,GAAD,IAAO;EACtC;EACA;EACAlB,SAAS,CAACmB,IAAV;EACA,OAAOD,GAAG,CAACE,IAAX;AACH,CALD,EAKGC,KAAD,IAAS;EACP;EACA,OAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,MAAV,CAAf,CAAP;AACH,CARD,E,CAWA;;AACA,eAAevB,QAAf"},"metadata":{},"sourceType":"module"}