{"ast":null,"code":"import SearchSelector from './SearchSelector/SearchSelector';\nimport { mapGetters, mapState } from 'vuex';\nexport default {\n  name: 'Search',\n\n  data() {\n    return {\n      // 带个服务器的参数\n      searchParams: {\n        // 一级分类的id\n        category1Id: \"\",\n        // 二级分类id\n        category2Id: \"\",\n        // 三级分类id\n        category3Id: \"\",\n        // 分类名字\n        categoryName: \"\",\n        // 关键字\n        keyword: \"\",\n        // 排序:初始状态应该是综合|降序\n        order: \"1:desc\",\n        // 分页器：代表的是当前是第几页\n        pageNo: 1,\n        // 代表每一页展示数据的个数\n        pageSize: 3,\n        // 平台售卖属性操作带的参数\n        props: [],\n        // 品牌\n        trademark: \"\"\n      }\n    };\n  },\n\n  components: {\n    SearchSelector\n  },\n\n  // 在组件挂载完毕之前执行一次【先与mounted之前】\n  beforeMount() {\n    // 复杂的写法\n    // this.searchParams.category1Id=this.$route.query.category1Id;\n    // this.searchParams.category2Id=this.$route.query.category2Id;\n    // this.searchParams.category3Id=this.$route.query.category3Id;\n    // Object.assign:ES6新增的语法，合并对象\n    Object.assign(this.searchParams, this.$route.query, this.$route.params);\n  },\n\n  // 组件挂载完毕执行一次（只执行一次）\n  mounted() {\n    // 在发送请求之前带给服务器参数【searchParams参数发生变化有数值带个服务器】\n    this.getData();\n  },\n\n  computed: { ...mapGetters(['goodsList']),\n\n    isOne() {\n      return this.searchParams.order.indexOf('1') != -1;\n    },\n\n    isTwo() {\n      return this.searchParams.order.indexOf('2') != -1;\n    },\n\n    isAsc() {\n      return this.searchParams.order.indexOf('asc') != -1;\n    },\n\n    isDesc() {\n      return this.searchParams.order.indexOf('desc') != -1;\n    },\n\n    // 从仓库当中获取search模块展示产品一共多少数据\n    ...mapState({\n      total: state => state.search.searchList.total\n    })\n  },\n  methods: {\n    // 向服务器发请求获取search模块数据（根据参数不同返回不同的数据进行展示—）\n    // 把这次请求封装为一个函数：当你需要调用的时候即可调用\n    getData() {\n      // 派发action,\n      this.$store.dispatch('getSearchList', this.searchParams);\n    },\n\n    // 删除分类的名字（面包屑）\n    removeCategoryName() {\n      // 把带个服务器的参数清空，还需要向服务器发请求 \n      // 从性能角度出发，属性值为undefined不会带给服务器\n      // 带给服务器参数说明可有可无的：如果属性值为空的字符串还是会把相应的字段带给服务器\n      // 但是把相应字段变为undefined，当前这个字段不会带服务器\n      this.searchParams.categoryName = undefined;\n      this.searchParams.category1Id = undefined;\n      this.searchParams.category2Id = undefined;\n      this.searchParams.category3Id = undefined;\n      this.getData(); // 地址栏也需要修改：进行路由跳转(现在的路由跳转只是跳转到自己这里)\n      // 严谨：本意是删除query,如果路径当中出现params不应该删除，路由跳转的时候应该还需要带着\n\n      if (this.$route.params) {\n        this.$router.push({\n          name: \"search\",\n          params: this.$route.params\n        });\n      }\n    },\n\n    // 删除关键字\n    removeKeyword() {\n      // 给服务器带的参数searchParams的keyword置空\n      this.searchParams.keyword = undefined; // 再次发送请求\n\n      this.getData(); // 通知兄弟组件Header清除关键字\n\n      this.$bus.$emit('clear'); // 进行路由的跳转\n\n      if (this.$route.query) {\n        this.$router.push({\n          name: 'search',\n          query: this.$route.query\n        });\n      }\n    },\n\n    // 自定义事件的回调\n    trademarkInfo(trademark) {\n      // 1:整理品牌字段的参数 “ID:品牌名称”\n      this.searchParams.trademark = `${trademark.tmId}:${trademark.tmName}`; // 再次发请求获取search模块列表数据进行展示\n\n      this.getData();\n    },\n\n    // 删除品牌的面包屑\n    removeTradeMark() {\n      // 将品牌信息清空\n      this.searchParams.trademark = undefined; // 再次发请求\n\n      this.getData();\n    },\n\n    // 收集平台属性地方回调函数（自定义事件）\n    attrInfo(attr, attrValue) {\n      // [\"属性ID:属性值：属性名\"]\n      // 参数格式整理好\n      let props = `${attr.attrId}:${attrValue}:${attr.attrName}`; // 数组去重\n      // if语句里面只要一条，可以省略大花括号\n\n      if (this.searchParams.props.indexOf(props) == -1) {\n        this.searchParams.props.push(props);\n      } // 再次发送请求\n\n\n      this.getData();\n    },\n\n    // 删除售卖的属性\n    removeAttr(index) {\n      // 再次整理参数\n      this.searchParams.props.splice(index, 1); // 再次发请求\n\n      this.getData();\n    },\n\n    // 排序的操作\n    changeOrder(flag) {\n      // flage形参：标记，1是综合 2是价格 用户点击的时候传递进来的\n      let originOrder = this.searchParams.order; // 这里获取到的是最开始的状态\n\n      let originFlag = this.searchParams.order.split(\":\")[0];\n      let originSort = this.searchParams.order.split(\":\")[1]; // 准备一个新的order属性值\n\n      let newOrder = ''; // 判断点击的是综合吗\n\n      if (flag == originFlag) {\n        newOrder = `${originFlag}:${originSort == \"desc\" ? \"asc\" : \"desc\"}`;\n      } else {\n        // 判断点击是价格吗 默认降序\n        newOrder = `${flag}:${'desc'}`;\n      } // 将新的order赋予searchParsms\n\n\n      this.searchParams.order = newOrder; // 再次发请求\n\n      this.getData();\n    },\n\n    // 自定义事件的回调函数---获取当前第几页\n    getPageNo(pageNo) {\n      // 整理带给服务器参数\n      this.searchParams.pageNo = pageNo; // 再次发请求\n\n      this.getData();\n    }\n\n  },\n  // 数据监听：监听组件实例身上的属性的属性值变化\n  watch: {\n    // 监听路由的信息是否发生变化，如果发生变化，再次发起请求\n    $route(newValue, oldValue) {\n      // 再次发请求之前整理带给服务器的参数\n      Object.assign(this.searchParams, this.$route.query, this.$route.params); // 再次发送请求\n\n      this.getData(); // 每一次请求，都一个吧相应的1,2,3级分类的id置空，让他接收下一次的\n\n      this.searchParams.category1Id = undefined;\n      this.searchParams.category2Id = undefined;\n      this.searchParams.category3Id = undefined;\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}