{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n// 对于axios进行二次封装\nimport axios from \"axios\"; // 在当前模块中引入store\n\nimport store from \"@/store\"; // 引入进度条\n\nimport nprogress from \"nprogress\"; // 引入进度条样式\n\nimport \"nprogress/nprogress.css\"; // start:进度条开始  done:进度条结束\n// 1:利用axios对象的方法create,去 创建一个axios实例\n// 2：request就是axios,只不过稍微配置一下\n\nconst requests = axios.create({\n  // 配置对象\n  //基础路径，发请求的时候，路径当中会出现api\n  baseURL: \"/api\",\n  // 代表请求超时的时间5S\n  tiemout: 5000\n}); // 请求拦截器：在发请求之前，请求拦截器可以检查到，可以在请求发出去之前做一下事情\n\nrequests.interceptors.request.use(config => {\n  // config：配置对象，对象里面有一个属性很重要，headers请求头\n  // 进度条开始动\n  if (store.state.detail.uuid_token) {\n    // 请求头添加一个字段（userTempId):和后台商量好的\n    config.headers.userTempId = store.state.detail.uuid_token;\n  } //    需要携带token带给服务器\n\n\n  if (store.state.user.token) {\n    config.headers.token = store.state.user.token;\n  }\n\n  nprogress.start();\n  return config;\n}); // 响应拦截器\n\nrequests.interceptors.response.use(res => {\n  // 成功的回调函数:服务器相应数据回来以后，响应拦截器可以检测到，可以做一下事情\n  // 进度条开始动\n  nprogress.done();\n  return res.data;\n}, error => {\n  // 响应失败的回调函数\n  return Promise.reject(new Error('fail'));\n}); // 对外暴露\n\nexport default requests;","map":null,"metadata":{},"sourceType":"module"}