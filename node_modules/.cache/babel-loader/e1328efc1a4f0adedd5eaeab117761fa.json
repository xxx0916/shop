{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { reqGetCode, reqUserLogin, reqUserRegister, reqUserInfo, reqLogout } from '@/api';\nimport { setToken, getToken, removeToken } from '@/utils/token'; // 登录与注册的模块\n\nconst state = {\n  code: '',\n  token: getToken(),\n  userInfo: {}\n};\nconst mutations = {\n  GETCODE(state, code) {\n    state.code = code;\n  },\n\n  USERLOGIN(state, token) {\n    state.token = token;\n  },\n\n  GETUSERINFO(state, userInfo) {\n    state.userInfo = userInfo;\n  },\n\n  // 清除本地数据\n  CLEAR(state) {\n    // 把仓库中用户数据清空，本地数据也清空\n    state.token = '';\n    state.userInfo = {};\n    removeToken();\n  }\n\n};\nconst actions = {\n  // 获取验证码\n  async getCode({\n    commit\n  }, phone) {\n    // 获取验证码的这个接口：把验证码返回，但是正常情况，后台把验证码发到用户手机上【省钱】\n    let result = await reqGetCode(phone);\n\n    if (result.code == 200) {\n      commit('GETCODE', result.data);\n      return \"ok\";\n    } else {\n      return Promise.reject(new Error('faile'));\n    }\n  },\n\n  // 用户注册\n  async userRegister({\n    commit\n  }, user) {\n    let result = await reqUserRegister(user);\n\n    if (result.code == 200) {\n      return \"ok\";\n    } else {\n      return Promise.reject(new Error('faile'));\n    }\n  },\n\n  // 登录业务（token）\n  async userLogin({\n    commit\n  }, data) {\n    let result = await reqUserLogin(data); // 服务器下发token,用户唯一标识符（uuid)\n    // 将来经常通过token找服务器要用户信息进行展示\n\n    if (result.code == 200) {\n      //用户已经登录成功获取到token\n      commit(\"USERLOGIN\", result.data.token); // 持久化存储token\n\n      setToken(result.data.token);\n      return 'ok';\n    } else {\n      return Promise.reject(new Error('faile'));\n    }\n  },\n\n  // 获取用户信息\n  async getUserInfo({\n    commit\n  }) {\n    let result = await reqUserInfo();\n\n    if (result.code == 200) {\n      //提交用户信息\n      commit(\"GETUSERINFO\", result.data);\n      return 'ok';\n    } else {\n      return Promise.reject(new Error(faile));\n    }\n  },\n\n  // 退出登录\n  async userLogout({\n    commit\n  }) {\n    // 只是向服务器发起一次请求，通知服务器清除token\n    let result = await reqLogout(); // action里面不能操作state,提交mutation修改state\n\n    if (result.code == 200) {\n      commit(\"CLEAR\");\n      return 'ok';\n    } else {\n      return Promise.reject(new Error('faile'));\n    }\n  }\n\n};\nconst getters = {};\nexport default {\n  state,\n  mutations,\n  actions,\n  getters\n};","map":null,"metadata":{},"sourceType":"module"}