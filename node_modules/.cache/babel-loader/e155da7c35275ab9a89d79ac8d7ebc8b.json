{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { reqGoodsInfo, reqAddOrUpdateShopCart } from '@/api'; // 封装游客身份模块uuid--->生成一个随机的字符串\n\nimport { getUUID } from '@/utils/uuid_token';\nconst state = {\n  // 商品详情\n  goodInfo: {},\n  // 游客临时身份\n  uuid_token: getUUID()\n};\nconst mutations = {\n  GETGOODINFO(state, goodInfo) {\n    state.goodInfo = goodInfo;\n  }\n\n};\nconst actions = {\n  // 获取产品信息的action\n  async getGoodInfo({\n    commit\n  }, skuId) {\n    let result = await reqGoodsInfo(skuId);\n\n    if (result.code == 200) {\n      commit('GETGOODINFO', result.data);\n    }\n  },\n\n  // 将产品添加到购物车中\n  async addOrUpdateShopCart({\n    commit\n  }, {\n    skuId,\n    skuNum\n  }) {\n    // 加入购物车返回的解构\n    // 加入购物车以后（发请求），前台将参数带给服务器\n    // 服务器写入数据成功，并没有返回其他的数据，只是返回code=200,代表这次操作成功\n    // 因为服务器没有返回其余的数据，因此不需要三连环存储数据\n    let result = await reqAddOrUpdateShopCart(skuId, skuNum); //代表服务器加入购物车成功\n\n    if (result.code == 200) {\n      return \"ok\";\n    } else {\n      // 代表加入购物车失败\n      return Promise.reject(new Error('faile'));\n    }\n  }\n\n}; // 简化数据而生\n\nconst getters = {\n  // 路径导航简化的数据\n  categoryView(state) {\n    // 比如：state.goodInfo初始状态空对象，空对象的categoryView属性值undefined\n    // 当前计算出的categoryView属性值至少是一个空对象，假的报错不会有了。\n    return state.goodInfo.categoryView || {};\n  },\n\n  // 简化产品信息的数据\n  skuInfo(state) {\n    return state.goodInfo.skuInfo || {};\n  },\n\n  // 商品的售卖属性的简化\n  spuSaleAttrList(state) {\n    return state.goodInfo.spuSaleAttrList || [];\n  }\n\n};\nexport default {\n  state,\n  mutations,\n  actions,\n  getters\n};","map":null,"metadata":{},"sourceType":"module"}