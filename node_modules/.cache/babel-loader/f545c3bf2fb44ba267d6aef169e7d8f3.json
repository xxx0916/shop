{"ast":null,"code":"// 引入Swiper\nimport Swiper from 'swiper';\nexport default {\n  name: 'Carousel',\n  props: ['list'],\n  watch: {\n    // 监听bannerList数据变化：因为这条数据方式了变化\n    bannerList: {\n      immediate: true,\n\n      //立即监听\n      handler(newValue, oldValue) {\n        // 通过watch监听bannerList属性的属性值的变化\n        // 如果执行handler方法，代表组件实例身上这个属性的属性已经有了【数组：四个元素】\n        // 当前这个函数执行：只能保证bannerList数据已经有了，但是你没办法保证v-for已经执行结束了\n        // v-for执行完毕，才有结构【现在在watch当中没办法保证的】\n        // netxTick:在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM\n        this.$nextTick(() => {\n          // 执行这个回调时候：保证服务器数据回来了，v-for执行完毕了【轮播图需要的结构也有了】\n          var mySwiper = new Swiper(this.$refs.cur, {\n            loop: true,\n            // 循环模式选项\n            // 如果需要分页器\n            pagination: {\n              el: '.swiper-pagination',\n              //点击小球切换图片\n              clickable: true\n            },\n            // 如果需要前进后退按钮\n            navigation: {\n              nextEl: '.swiper-button-next',\n              prevEl: '.swiper-button-prev'\n            }\n          });\n        });\n      }\n\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}