{"ast":null,"code":"import { mapGetters } from 'vuex';\nimport throttle from 'lodash/throttle';\nexport default {\n  name: 'ShopCart',\n\n  mounted() {\n    this.getData();\n  },\n\n  methods: {\n    // 获取个人购物车数据\n    getData() {\n      this.$store.dispatch('getCartList');\n    },\n\n    // 修改购物车中购买某一商品的个数[节流]\n    handler: throttle(async function (type, disNum, cart) {\n      // type:为了区分这三个元素\n      // disNum形参：+变化量（1） -变化量（-1） input最终的个数（并不是变化量）\n      // cart:哪一个产品[身上有id]\n      // 向服务器发请求，修改数量\n      switch (type) {\n        // 加号\n        case \"add\":\n          disNum = 1;\n          break;\n\n        case \"minus\":\n          // 判断产品的个数大于1，才可以传递给服务器-1\n          // 如果出现产品的个数小于大于1，传递给服务器个数0（原封不动）\n          disNum = cart.skuNum > 1 ? -1 : 0;\n          break;\n\n        case \"change\":\n          // 用户输入进来的最终量，非法的（带有汉字|出现负数），带给服务器数字零\n          if (isNaN(disNum) || disNum < 1) {\n            disNum = 0;\n          } else {\n            // 属于正常情况（小数：取证），带给服务器变化的量 用户输入进来 - 产品的起始个数\n            disNum = parseInt(disNum) - cart.skuNum;\n          } // disNum = (isNaN(disNum)||disNum<1)?0:parseInt(disNum) - cart.skuNum;\n\n\n          break;\n      } // 派发action\n\n\n      try {\n        // 代表的是修改成功\n        await this.$store.dispatch('addOrUpdateShopCart', {\n          skuId: cart.skuId,\n          skuNum: disNum\n        }); // 发请求\n\n        this.getData();\n      } catch (error) {}\n    }, 1000),\n\n    // 删除某一个商品的操作\n    async deleteCartById(cart) {\n      try {\n        // 成功 再次发请求获取数据\n        await this.$store.dispatch(\"deleteCartListBySkuId\", cart.skuId);\n        this.getData();\n      } catch (error) {\n        alert(error.message);\n      }\n    },\n\n    // 修改某一个商品的勾选状态\n    async updateChecked(cart, event) {\n      // 带个服务器的参数isChecked，不是布尔值，应该是0|1\n      try {\n        // 修改数据成功，再次获取服务器数据（购物车）\n        let isChecked = event.target.checked ? \"1\" : \"0\";\n        await this.$store.dispatch('UpdateCheckedById', {\n          skuId: cart.skuId,\n          isChecked\n        });\n        this.getData();\n      } catch (error) {\n        // 失败\n        alert(error.message);\n      }\n    },\n\n    // 删除全部选中的商品\n    // 这个回调无法收集有用的信息\n    async deleteAllCheckedCart() {\n      try {\n        // 派发action\n        await this.$store.dispatch(\"deleteAllCheckedCart\"); // 在发请求获取购物车\n\n        this.getData();\n      } catch (error) {}\n    },\n\n    // 修改全部产品的选中状态\n    async updateAllCartChecked(event) {\n      try {\n        let isChecked = event.target.checked ? \"1\" : \"0\"; // 派发action\n\n        await this.$store.dispatch('updateAllCartIsChecked', isChecked);\n        this.getData();\n      } catch (error) {\n        alert(error.message);\n      }\n    }\n\n  },\n  computed: { ...mapGetters(['cartList']),\n\n    // 购物车数据\n    cartInfoList() {\n      return this.cartList.cartInfoList || [];\n    },\n\n    // 计算购买产品的总价\n    totalPrice() {\n      let sum = 0;\n      this.cartInfoList.forEach(item => {\n        sum += item.skuNum * item.skuPrice;\n      });\n      return sum;\n    },\n\n    // 全选\n    isAllCheck() {\n      //遍历数组里面的元素  如果isChecked都等于1，返回true 反之有一个不等于1 为false\n      return this.cartInfoList.every(item => item.isChecked == 1);\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}